--[[
Copyright Â© 2015 Dynatrace LLC. 
All rights reserved. 
Unpublished rights reserved under the Copyright Laws of the United States.

U.S. GOVERNMENT RIGHTS-Use, duplication, or disclosure by the U.S. Government is
subject to restrictions as set forth in Dynatrace LLC license agreement and as
provided in DFARS 227.7202-1(a) and 227.7202-3(a) (1995), DFARS
252.227-7013(c)(1)(ii) (OCT 1988), FAR 12.212 (a) (1995), FAR 52.227-19, 
or FAR 52.227-14 (ALT III), as applicable.

This product contains confidential information and trade secrets of Dynatrace LLC. 
Disclosure is prohibited without the prior express written permission of Dynatrace LLC. 
Use of this product is subject to the terms and conditions of the user's License Agreement with Dynatrace LLC.
See the license agreement text online at https://community.dynatrace.com/community/download/attachments/5144912/dynaTraceBSD.txt?version=3&modificationDate=1441261477160&api=v2
--]]

--[[

Tests of Corba GIOP protocol parser.

--]]

package.path = package.path .. ';../../../config/?.lua'

Stats = require 'stats'
local corba = require 'corba'
local lunit = require 'lunit'

module( "corba_test", lunit.testcase, package.seeall )

function test_giop12_request()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x01, 0x00,
		0x5c, 0x00, 0x00, 0x00, 0xb8, 0x81, 0x5e, 0x9a,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xae, 0x18, 0x7d, 0x45, 0xa4, 0xf1, 0xdf, 0x8d,
		0x83, 0x4c, 0xe9, 0x0d, 0xea, 0x92, 0xca, 0x68,
		0x01, 0x00, 0x00, 0x00, 0xf6, 0x96, 0x54, 0xd0,
		0x0d, 0x00, 0x00, 0x00, 0x5f, 0x67, 0x65, 0x74,
		0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x05,
		0x09, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	--print(payload_str)
	local parse_status = corba.parse_request(payload_str, obj)
	print('Request:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print("\top name:", obj.operation_name)
	assert(obj.operation_name == '_get_balance', 'expected: "_get_balance" actual: "' .. obj.operation_name .. '"')
	print("\tbrowser_version:", string.format("0x%04x", obj.browser_version))
	assert(obj.browser_version == 0x0102, 'browser_version failed')
end


function test_giop12_request2()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x29, 0x00, 0x00, 0x00, 0x2e,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0xbd,
		0x00, 0x00, 0x00, 0x8a, 0x4a, 0x4d, 0x42, 0x49,
		0x00, 0x00, 0x00, 0x12, 0x47, 0x73, 0xe3, 0xaa,
		0x37, 0x64, 0x30, 0x62, 0x63, 0x37, 0x37, 0x33,
		0x65, 0x33, 0x61, 0x61, 0x66, 0x63, 0x33, 0x34,
		0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x66,
		0x49, 0x45, 0x4a, 0x50, 0x02, 0x00, 0xbf, 0xe1,
		0x68, 0xb0, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
		0x72, 0x31, 0x1a, 0x57, 0x73, 0x6e, 0x44, 0x69,
		0x73, 0x74, 0x43, 0x6f, 0x73, 0x4f, 0x62, 0x6a,
		0x65, 0x63, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74,
		0x65, 0x72, 0x57, 0x4c, 0x4d, 0x00, 0x00, 0x00,
		0x35, 0x68, 0x61, 0x6d, 0x68, 0x63, 0x77, 0x70,
		0x30, 0x31, 0x43, 0x65, 0x6c, 0x6c, 0x30, 0x31,
		0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x68,
		0x61, 0x6d, 0x68, 0x63, 0x77, 0x70, 0x30, 0x31,
		0x4e, 0x6f, 0x64, 0x65, 0x30, 0x31, 0x2f, 0x73,
		0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
		0x65, 0x72, 0x76, 0x65, 0x72, 0x31, 0xbd, 0xbd,
		0x00, 0x00, 0x00, 0x16, 0x72, 0x65, 0x73, 0x6f,
		0x6c, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
		0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66,
		0x6f, 0x00, 0xbd, 0xbd, 0x00, 0x00, 0x00, 0x01,
		0x44, 0x59, 0x4e, 0x41, 0x00, 0x00, 0x00, 0x1e,
		0x01, 0x1e, 0x15, 0x01, 0xfe, 0xb5, 0x65, 0xac,
		0x6f, 0x44, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
		0x00, 0x0a, 0x65, 0xac, 0x6f, 0x44, 0x00, 0x00,
		0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0xbd, 0xbd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38,
		0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6e, 0x2e, 0x77,
		0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
		0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
		0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
		0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
		0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
		0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x00
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	--print(payload_str)
	local parse_status = corba.parse_request(payload_str, obj)
	print('Request:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print("\top name:", obj.operation_name)
	assert(obj.operation_name == 'resolve_complete_info', 'expected: "resolve_complete_info" actual: "' .. obj.operation_name .. '"')
	print("\tbrowser_version:", string.format("0x%04x", obj.browser_version))
	assert(obj.browser_version == 0x0102, 'browser_version failed')
end


function test_giop12_request3()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x00, 0x00,
		0x00, 0x00, 0x0f, 0x34, 0x00, 0x00, 0x00, 0x3e,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0xbd,
		0x00, 0x00, 0x00, 0xe7, 0x4a, 0x4d, 0x42, 0x49,
		0x00, 0x00, 0x00, 0x12, 0x47, 0x73, 0xe3, 0xaa,
		0x37, 0x64, 0x30, 0x62, 0x63, 0x37, 0x37, 0x33,
		0x65, 0x33, 0x61, 0x61, 0x66, 0x63, 0x33, 0x34,
		0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0xc3,
		0x49, 0x45, 0x4a, 0x50, 0x02, 0x00, 0x0f, 0xff,
		0xa6, 0x4b, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
		0x72, 0x31, 0x03, 0x45, 0x4a, 0x42, 0x00, 0x00,
		0x00, 0xa9, 0xad, 0xac, 0x00, 0x02, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
		0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6e, 0x2e, 0x77,
		0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
		0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
		0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x73,
		0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6d, 0x70,
		0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4c,
		0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53,
		0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xac, 0xac,
		0x00, 0x02, 0x00, 0x01, 0x11, 0x52, 0x00, 0x00,
		0x00, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6e, 0x2e,
		0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
		0x65, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6e,
		0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
		0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
		0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
		0x72, 0x2e, 0x6a, 0x61, 0x72, 0x23, 0x49, 0x6d,
		0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
		0x6c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77,
		0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
		0x65, 0x61, 0x6e, 0xbd, 0x00, 0x00, 0x00, 0x0c,
		0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x4c,
		0x69, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x44, 0x59, 0x4e, 0x41, 0x00, 0x00, 0x00, 0x1e,
		0x01, 0x1e, 0x15, 0x01, 0xfe, 0xb5, 0x65, 0xac,
		0x6f, 0x44, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
		0x00, 0x0a, 0x65, 0xac, 0x6f, 0x44, 0x00, 0x00,
		0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x61,
		0x52, 0x4d, 0x49, 0x3a, 0x63, 0x6f, 0x6d, 0x2e,
		0x6b, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
		0x6c, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72,
		0x76, 0x69, 0x63, 0x65, 0x2e, 0x77, 0x6f, 0x72,
		0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x69,
		0x6c, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72,
		0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
		0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x3a, 0x38,
		0x35, 0x41, 0x39, 0x45, 0x39, 0x39, 0x41, 0x44,
		0x30, 0x31, 0x31, 0x43, 0x39, 0x42, 0x46, 0x3a,
		0x31, 0x32, 0x46, 0x43, 0x46, 0x30, 0x36, 0x32,
		0x38, 0x34, 0x30, 0x41, 0x45, 0x33, 0x33, 0x37,
		0x00, 0x01, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0x00, 0x00, 0x00, 0x38, 0x52, 0x4d, 0x49, 0x3a,
		0x6a, 0x61, 0x76, 0x61, 0x2e, 0x75, 0x74, 0x69,
		0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65,
		0x74, 0x3a, 0x41, 0x43, 0x31, 0x31, 0x37, 0x45,
		0x32, 0x38, 0x46, 0x45, 0x33, 0x36, 0x35, 0x38,
		0x37, 0x41, 0x3a, 0x42, 0x41, 0x34, 0x34, 0x38,
		0x35, 0x39, 0x35, 0x39, 0x36, 0x42, 0x38, 0x42,
		0x37, 0x33, 0x34, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x02, 0x01, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0x00, 0x00, 0x00, 0x4a, 0x52, 0x4d, 0x49, 0x3a,
		0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x6d, 0x67, 0x2e,
		0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x4d,
		0x49, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x75,
		0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68,
		0x53, 0x65, 0x74, 0x3a, 0x41, 0x43, 0x31, 0x31,
		0x37, 0x45, 0x32, 0x38, 0x46, 0x45, 0x33, 0x36,
		0x35, 0x38, 0x37, 0x41, 0x3a, 0x42, 0x41, 0x34,
		0x34, 0x38, 0x35, 0x39, 0x35, 0x39, 0x36, 0x42,
		0x38, 0x42, 0x37, 0x33, 0x34, 0x00, 0xbd, 0xbd,
		0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x10,
		0x3f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0x00, 0x00, 0x00, 0x23, 0x49, 0x44, 0x4c, 0x3a,
		0x6f, 0x6d, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
		0x43, 0x4f, 0x52, 0x42, 0x41, 0x2f, 0x57, 0x53,
		0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
		0x75, 0x65, 0x3a, 0x31, 0x2e, 0x30, 0x00, 0xbd,
		0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74,
		0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x65,
		0x00, 0x72, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xa8, 0x00, 0x00, 0x00, 0x0e,
		0x00, 0x00, 0x00, 0x0a, 0x00, 0x4f, 0x00, 0x77,
		0x00, 0x6e, 0x00, 0x65, 0x00, 0x72, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7c,
		0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1c,
		0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74,
		0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x65,
		0x00, 0x72, 0x00, 0x54, 0x00, 0x6f, 0x00, 0x74,
		0x00, 0x61, 0x00, 0x6c, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x0a,
		0x00, 0x00, 0x00, 0x06, 0x00, 0x45, 0x00, 0x74,
		0x00, 0x73, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x10, 0x00, 0x57, 0x00, 0x6f,
		0x00, 0x72, 0x00, 0x6b, 0x00, 0x49, 0x00, 0x74,
		0x00, 0x65, 0x00, 0x6d, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfe, 0xe8, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x10, 0x00, 0x53, 0x00, 0x68,
		0x00, 0x69, 0x00, 0x70, 0x00, 0x54, 0x00, 0x79,
		0x00, 0x70, 0x00, 0x65, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfe, 0xb8, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x0c, 0x00, 0x41, 0x00, 0x63,
		0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x8c,
		0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1a,
		0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x73,
		0x00, 0x69, 0x00, 0x67, 0x00, 0x6e, 0x00, 0x65,
		0x00, 0x65, 0x00, 0x4e, 0x00, 0x61, 0x00, 0x6d,
		0x00, 0x65, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfe, 0x50, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x00, 0x08, 0x00, 0x54, 0x00, 0x79,
		0x00, 0x70, 0x00, 0x65, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfe, 0x28, 0x00, 0x00, 0x00, 0x14,
		0x00, 0x00, 0x00, 0x10, 0x00, 0x54, 0x00, 0x72,
		0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66,
		0x00, 0x65, 0x00, 0x72, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfd, 0xf8, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x0c, 0x00, 0x45, 0x00, 0x74,
		0x00, 0x61, 0x00, 0x41, 0x00, 0x74, 0x00, 0x61,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xcc,
		0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0a,
		0x00, 0x4f, 0x00, 0x72, 0x00, 0x64, 0x00, 0x65,
		0x00, 0x72, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xff,
		0x7f, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x3a,
		0x52, 0x4d, 0x49, 0x3a, 0x6a, 0x61, 0x76, 0x61,
		0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x72,
		0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x3a,
		0x46, 0x36, 0x35, 0x35, 0x31, 0x35, 0x34, 0x46,
		0x33, 0x32, 0x38, 0x31, 0x35, 0x33, 0x38, 0x30,
		0x3a, 0x37, 0x38, 0x38, 0x31, 0x44, 0x32, 0x31,
		0x44, 0x39, 0x39, 0x43, 0x37, 0x36, 0x31, 0x39,
		0x44, 0x00, 0xbd, 0xbd, 0x00, 0x00, 0x00, 0x08,
		0x02, 0x01, 0xbd, 0xbd, 0x00, 0x00, 0x00, 0x11,
		0x7f, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x4c,
		0x52, 0x4d, 0x49, 0x3a, 0x6f, 0x72, 0x67, 0x2e,
		0x6f, 0x6d, 0x67, 0x2e, 0x63, 0x75, 0x73, 0x74,
		0x6f, 0x6d, 0x52, 0x4d, 0x49, 0x2e, 0x6a, 0x61,
		0x76, 0x61, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
		0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73,
		0x74, 0x3a, 0x46, 0x36, 0x35, 0x35, 0x31, 0x35,
		0x34, 0x46, 0x33, 0x32, 0x38, 0x31, 0x35, 0x33,
		0x38, 0x30, 0x3a, 0x37, 0x38, 0x38, 0x31, 0x44,
		0x32, 0x31, 0x44, 0x39, 0x39, 0x43, 0x37, 0x36,
		0x31, 0x39, 0x44, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x00, 0x00, 0x16, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x63,
		0x52, 0x4d, 0x49, 0x3a, 0x63, 0x6f, 0x6d, 0x2e,
		0x6b, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
		0x6c, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x72,
		0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
		0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
		0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f,
		0x6c, 0x65, 0x5c, 0x55, 0x30, 0x30, 0x32, 0x34,
		0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
		0x3a, 0x33, 0x33, 0x32, 0x43, 0x30, 0x34, 0x45,
		0x37, 0x32, 0x45, 0x33, 0x44, 0x42, 0x32, 0x41,
		0x31, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x00, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x8c,
		0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20,
		0x00, 0x45, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x45,
		0x00, 0x52, 0x00, 0x5f, 0x00, 0x47, 0x00, 0x4f,
		0x00, 0x4f, 0x00, 0x44, 0x00, 0x53, 0x00, 0x5f,
		0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x43,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x50,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfc, 0x40, 0x00, 0x00, 0x00, 0x1e,
		0x00, 0x00, 0x00, 0x1a, 0x00, 0x4f, 0x00, 0x50,
		0x00, 0x45, 0x00, 0x52, 0x00, 0x41, 0x00, 0x54,
		0x00, 0x49, 0x00, 0x56, 0x00, 0x45, 0x00, 0x5f,
		0x00, 0x46, 0x00, 0x43, 0x00, 0x4c, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfb, 0xf8, 0x00, 0x00, 0x00, 0x36,
		0x00, 0x00, 0x00, 0x32, 0x00, 0x52, 0x00, 0x45,
		0x00, 0x51, 0x00, 0x55, 0x00, 0x45, 0x00, 0x53,
		0x00, 0x54, 0x00, 0x5f, 0x00, 0x4d, 0x00, 0x49,
		0x00, 0x53, 0x00, 0x53, 0x00, 0x49, 0x00, 0x4e,
		0x00, 0x47, 0x00, 0x5f, 0x00, 0x44, 0x00, 0x4f,
		0x00, 0x43, 0x00, 0x55, 0x00, 0x4d, 0x00, 0x45,
		0x00, 0x4e, 0x00, 0x54, 0x00, 0x53, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xa8,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfb, 0x98, 0x00, 0x00, 0x00, 0x26,
		0x00, 0x00, 0x00, 0x22, 0x00, 0x4d, 0x00, 0x41,
		0x00, 0x49, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x41,
		0x00, 0x49, 0x00, 0x4e, 0x00, 0x5f, 0x00, 0x53,
		0x00, 0x41, 0x00, 0x49, 0x00, 0x4c, 0x00, 0x4c,
		0x00, 0x49, 0x00, 0x53, 0x00, 0x54, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x58,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfb, 0x48, 0x00, 0x00, 0x00, 0x30,
		0x00, 0x00, 0x00, 0x2c, 0x00, 0x43, 0x00, 0x52,
		0x00, 0x45, 0x00, 0x41, 0x00, 0x54, 0x00, 0x45,
		0x00, 0x5f, 0x00, 0x52, 0x00, 0x45, 0x00, 0x54,
		0x00, 0x52, 0x00, 0x49, 0x00, 0x45, 0x00, 0x56,
		0x00, 0x41, 0x00, 0x4c, 0x00, 0x5f, 0x00, 0x4f,
		0x00, 0x52, 0x00, 0x44, 0x00, 0x45, 0x00, 0x52,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfa, 0xf0, 0x00, 0x00, 0x00, 0x42,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x43, 0x00, 0x55,
		0x00, 0x53, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4d,
		0x00, 0x53, 0x00, 0x5f, 0x00, 0x43, 0x00, 0x4d,
		0x00, 0x49, 0x00, 0x5f, 0x00, 0x53, 0x00, 0x45,
		0x00, 0x4e, 0x00, 0x44, 0x00, 0x5f, 0x00, 0x50,
		0x00, 0x45, 0x00, 0x52, 0x00, 0x4d, 0x00, 0x49,
		0x00, 0x53, 0x00, 0x53, 0x00, 0x49, 0x00, 0x4f,
		0x00, 0x4e, 0x00, 0x5f, 0x00, 0x4c, 0x00, 0x43,
		0x00, 0x4c, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfd, 0x94, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x84,
		0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x3c,
		0x00, 0x43, 0x00, 0x55, 0x00, 0x53, 0x00, 0x54,
		0x00, 0x4f, 0x00, 0x4d, 0x00, 0x53, 0x00, 0x5f,
		0x00, 0x54, 0x00, 0x31, 0x00, 0x5f, 0x00, 0x53,
		0x00, 0x45, 0x00, 0x4e, 0x00, 0x44, 0x00, 0x5f,
		0x00, 0x50, 0x00, 0x45, 0x00, 0x52, 0x00, 0x4d,
		0x00, 0x49, 0x00, 0x53, 0x00, 0x53, 0x00, 0x49,
		0x00, 0x4f, 0x00, 0x4e, 0x00, 0x5f, 0x00, 0x4c,
		0x00, 0x43, 0x00, 0x4c, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfd, 0x2c, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x1c,
		0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x36,
		0x00, 0x43, 0x00, 0x55, 0x00, 0x53, 0x00, 0x54,
		0x00, 0x4f, 0x00, 0x4d, 0x00, 0x53, 0x00, 0x5f,
		0x00, 0x43, 0x00, 0x4d, 0x00, 0x49, 0x00, 0x5f,
		0x00, 0x53, 0x00, 0x45, 0x00, 0x4e, 0x00, 0x44,
		0x00, 0x5f, 0x00, 0x50, 0x00, 0x45, 0x00, 0x52,
		0x00, 0x4d, 0x00, 0x49, 0x00, 0x53, 0x00, 0x53,
		0x00, 0x49, 0x00, 0x4f, 0x00, 0x4e, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc8,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf9, 0xb8, 0x00, 0x00, 0x00, 0x3e,
		0x00, 0x00, 0x00, 0x3a, 0x00, 0x43, 0x00, 0x55,
		0x00, 0x53, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4d,
		0x00, 0x53, 0x00, 0x5f, 0x00, 0x43, 0x00, 0x4d,
		0x00, 0x49, 0x00, 0x5f, 0x00, 0x43, 0x00, 0x52,
		0x00, 0x45, 0x00, 0x41, 0x00, 0x54, 0x00, 0x45,
		0x00, 0x5f, 0x00, 0x50, 0x00, 0x45, 0x00, 0x52,
		0x00, 0x4d, 0x00, 0x49, 0x00, 0x53, 0x00, 0x53,
		0x00, 0x49, 0x00, 0x4f, 0x00, 0x4e, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x60,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf9, 0x50, 0x00, 0x00, 0x00, 0x1e,
		0x00, 0x00, 0x00, 0x1a, 0x00, 0x4f, 0x00, 0x50,
		0x00, 0x45, 0x00, 0x52, 0x00, 0x41, 0x00, 0x54,
		0x00, 0x49, 0x00, 0x56, 0x00, 0x45, 0x00, 0x5f,
		0x00, 0x4c, 0x00, 0x43, 0x00, 0x4c, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x18,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf9, 0x08, 0x00, 0x00, 0x00, 0x3c,
		0x00, 0x00, 0x00, 0x38, 0x00, 0x43, 0x00, 0x55,
		0x00, 0x53, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4d,
		0x00, 0x53, 0x00, 0x5f, 0x00, 0x54, 0x00, 0x31,
		0x00, 0x5f, 0x00, 0x43, 0x00, 0x52, 0x00, 0x45,
		0x00, 0x41, 0x00, 0x54, 0x00, 0x45, 0x00, 0x5f,
		0x00, 0x50, 0x00, 0x45, 0x00, 0x52, 0x00, 0x4d,
		0x00, 0x49, 0x00, 0x53, 0x00, 0x53, 0x00, 0x49,
		0x00, 0x4f, 0x00, 0x4e, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfb, 0xb4, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xa4,
		0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x16,
		0x00, 0x53, 0x00, 0x54, 0x00, 0x41, 0x00, 0x46,
		0x00, 0x46, 0x00, 0x4d, 0x00, 0x45, 0x00, 0x4d,
		0x00, 0x42, 0x00, 0x45, 0x00, 0x52, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x70,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf8, 0x60, 0x00, 0x00, 0x00, 0x46,
		0x00, 0x00, 0x00, 0x42, 0x00, 0x43, 0x00, 0x55,
		0x00, 0x53, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4d,
		0x00, 0x53, 0x00, 0x5f, 0x00, 0x43, 0x00, 0x4d,
		0x00, 0x49, 0x00, 0x5f, 0x00, 0x43, 0x00, 0x52,
		0x00, 0x45, 0x00, 0x41, 0x00, 0x54, 0x00, 0x45,
		0x00, 0x5f, 0x00, 0x50, 0x00, 0x45, 0x00, 0x52,
		0x00, 0x4d, 0x00, 0x49, 0x00, 0x53, 0x00, 0x53,
		0x00, 0x49, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x5f,
		0x00, 0x4c, 0x00, 0x43, 0x00, 0x4c, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x00,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf7, 0xf0, 0x00, 0x00, 0x00, 0x24,
		0x00, 0x00, 0x00, 0x20, 0x00, 0x53, 0x00, 0x49,
		0x00, 0x4e, 0x00, 0x47, 0x00, 0x4c, 0x00, 0x45,
		0x00, 0x5f, 0x00, 0x46, 0x00, 0x49, 0x00, 0x4c,
		0x00, 0x45, 0x00, 0x5f, 0x00, 0x55, 0x00, 0x53,
		0x00, 0x45, 0x00, 0x52, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xfa, 0xb4, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xa4,
		0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x28,
		0x00, 0x43, 0x00, 0x52, 0x00, 0x45, 0x00, 0x41,
		0x00, 0x54, 0x00, 0x45, 0x00, 0x5f, 0x00, 0x57,
		0x00, 0x4f, 0x00, 0x52, 0x00, 0x4b, 0x00, 0x49,
		0x00, 0x4e, 0x00, 0x47, 0x00, 0x5f, 0x00, 0x50,
		0x00, 0x41, 0x00, 0x50, 0x00, 0x45, 0x00, 0x52,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x60,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf7, 0x50, 0x00, 0x00, 0x00, 0x38,
		0x00, 0x00, 0x00, 0x34, 0x00, 0x43, 0x00, 0x55,
		0x00, 0x53, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4d,
		0x00, 0x53, 0x00, 0x5f, 0x00, 0x54, 0x00, 0x31,
		0x00, 0x5f, 0x00, 0x53, 0x00, 0x45, 0x00, 0x4e,
		0x00, 0x44, 0x00, 0x5f, 0x00, 0x50, 0x00, 0x45,
		0x00, 0x52, 0x00, 0x4d, 0x00, 0x49, 0x00, 0x53,
		0x00, 0x53, 0x00, 0x49, 0x00, 0x4f, 0x00, 0x4e,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf6, 0xf0, 0x00, 0x00, 0x00, 0x44,
		0x00, 0x00, 0x00, 0x40, 0x00, 0x43, 0x00, 0x55,
		0x00, 0x53, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4d,
		0x00, 0x53, 0x00, 0x5f, 0x00, 0x54, 0x00, 0x31,
		0x00, 0x5f, 0x00, 0x43, 0x00, 0x52, 0x00, 0x45,
		0x00, 0x41, 0x00, 0x54, 0x00, 0x45, 0x00, 0x5f,
		0x00, 0x50, 0x00, 0x45, 0x00, 0x52, 0x00, 0x4d,
		0x00, 0x49, 0x00, 0x53, 0x00, 0x53, 0x00, 0x49,
		0x00, 0x4f, 0x00, 0x4e, 0x00, 0x5f, 0x00, 0x4c,
		0x00, 0x43, 0x00, 0x4c, 0xff, 0xff, 0xff, 0xff,
		0x7f, 0xff, 0xff, 0x02, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf6, 0x98, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x54, 0x00, 0x45, 0x00, 0x53, 0x00, 0x54,
		0x00, 0x4f, 0x00, 0x50, 0x00, 0x30, 0x00, 0x34,
		0x7f, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x58,
		0x52, 0x4d, 0x49, 0x3a, 0x63, 0x6f, 0x6d, 0x2e,
		0x6b, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x70,
		0x6c, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72,
		0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x72, 0x64,
		0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
		0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
		0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x33, 0x33,
		0x32, 0x43, 0x30, 0x34, 0x45, 0x37, 0x32, 0x45,
		0x33, 0x44, 0x42, 0x32, 0x41, 0x31, 0x3a, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00,
		0x7f, 0xff, 0xff, 0x02, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf6, 0x18, 0x00, 0x00, 0x00, 0x1a,
		0x00, 0x54, 0x00, 0x52, 0x00, 0x41, 0x00, 0x4e,
		0x00, 0x53, 0x00, 0x46, 0x00, 0x45, 0x00, 0x52,
		0x00, 0x5f, 0x00, 0x56, 0x00, 0x49, 0x00, 0x45,
		0x00, 0x57, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x02,
		0x00, 0x00, 0x00, 0x64, 0x52, 0x4d, 0x49, 0x3a,
		0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6e, 0x2e, 0x77,
		0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
		0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
		0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
		0x77, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
		0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57,
		0x6f, 0x72, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x46,
		0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x33, 0x42,
		0x41, 0x39, 0x33, 0x30, 0x39, 0x36, 0x39, 0x46,
		0x34, 0x45, 0x44, 0x45, 0x46, 0x45, 0x3a, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf4, 0xc8, 0x00, 0x00, 0x00, 0x02,
		0x02, 0x01, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0xfc,
		0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x10,
		0x3f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x02,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x3c,
		0x00, 0x00, 0x00, 0x12, 0x00, 0x30, 0x00, 0x30,
		0x00, 0x31, 0x00, 0x30, 0x00, 0x2d, 0x00, 0x34,
		0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf4, 0x68, 0x00, 0x00, 0x00, 0x02,
		0x02, 0x01, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x9c,
		0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x10,
		0x3f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0x00, 0x00, 0x00, 0x67, 0x52, 0x4d, 0x49, 0x3a,
		0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6e, 0x2e, 0x77,
		0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
		0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
		0x77, 0x2e, 0x57, 0x46, 0x41, 0x62, 0x73, 0x74,
		0x72, 0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b,
		0x49, 0x74, 0x65, 0x6d, 0x5c, 0x55, 0x30, 0x30,
		0x32, 0x34, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
		0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
		0x3a, 0x33, 0x33, 0x32, 0x43, 0x30, 0x34, 0x45,
		0x37, 0x32, 0x45, 0x33, 0x44, 0x42, 0x32, 0x41,
		0x31, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x00, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x74,
		0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x16,
		0x00, 0x43, 0x00, 0x48, 0x00, 0x45, 0x00, 0x43,
		0x00, 0x4b, 0x00, 0x45, 0x00, 0x44, 0x00, 0x5f,
		0x00, 0x4f, 0x00, 0x55, 0x00, 0x54, 0xbd, 0xbd,
		0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xbd, 0xbd, 0xbd, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x54,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xf4, 0x30, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x00, 0x00, 0x0e, 0x00, 0x52, 0x00, 0x55,
		0x00, 0x4e, 0x00, 0x4e, 0x00, 0x49, 0x00, 0x4e,
		0x00, 0x47, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xfd,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xbd, 0xbd, 0xbd,
		0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0x18, 0x7f, 0xff, 0xff, 0x0a,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf4,
		0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0a,
		0x00, 0x52, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44,
		0x00, 0x59, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xff,
		0x7f, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x38,
		0x52, 0x4d, 0x49, 0x3a, 0x6a, 0x61, 0x76, 0x61,
		0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x49, 0x6e,
		0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x34, 0x37,
		0x36, 0x39, 0x33, 0x46, 0x46, 0x42, 0x34, 0x46,
		0x45, 0x35, 0x37, 0x39, 0x46, 0x34, 0x3a, 0x31,
		0x32, 0x45, 0x32, 0x41, 0x30, 0x41, 0x34, 0x46,
		0x37, 0x38, 0x31, 0x38, 0x37, 0x33, 0x38, 0x00,
		0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00,
		0x7f, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x38,
		0x52, 0x4d, 0x49, 0x3a, 0x6a, 0x61, 0x76, 0x61,
		0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x42, 0x6f,
		0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x46, 0x45,
		0x30, 0x37, 0x30, 0x44, 0x36, 0x41, 0x37, 0x42,
		0x44, 0x37, 0x34, 0x31, 0x39, 0x41, 0x3a, 0x43,
		0x44, 0x32, 0x30, 0x37, 0x32, 0x38, 0x30, 0x44,
		0x35, 0x39, 0x43, 0x46, 0x41, 0x45, 0x45, 0x00,
		0x00, 0xbd, 0xbd, 0xbd, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xb8, 0x7f, 0xff, 0xff, 0x02,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb0,
		0x01, 0xbd, 0xbd, 0xbd, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	--print(payload_str)
	local parse_status = corba.parse_request(payload_str, obj)
	print('Request:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print("\top name:", obj.operation_name)
	assert(obj.operation_name == 'getWorkList', 'expected: "getWorkList" actual: "' .. obj.operation_name .. '"')
	print("\tbrowser_version:", string.format("0x%04x", obj.browser_version))
	assert(obj.browser_version == 0x0102, 'browser_version failed')
end


function test_giop12_response()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x01, 0x01,
		0x28, 0x00, 0x00, 0x00, 0xb8, 0x81, 0x5e, 0x9a,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x05,
		0x09, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_response(payload_str, obj)
	print('Response:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
end

function test_giop11_request()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x01, 0x01, 0x09, 0x4a, 0x41, 0x43, 0x01,
		0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e,
		0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
		0x52, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_request(payload_str, obj)
	print('Request:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print("\tclient version:", string.format("0x%04x", obj.browser_version))
	assert(obj.browser_version == 0x0101, 'browser_version failed')
	print("\top name:", obj.operation_name)
	assert(obj.operation_name == 'IsSystemReady', 'expected: "IsSystemReady" actual: "' .. obj.operation_name .. '"')
end

function test_giop11_response()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_response(payload_str, obj)
	print('Response:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
end

function test_giop11_response_with_system_exception()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x23, 0x49, 0x44, 0x4c, 0x3a,
		0x6f, 0x6d, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
		0x43, 0x4f, 0x52, 0x42, 0x41, 0x2f, 0x4e, 0x4f,
		0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
		0x4e, 0x54, 0x3a, 0x31, 0x2e, 0x30, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_response(payload_str, obj)
	print('Response:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK actual=' .. parse_status)
	print('\tappl_errors:', obj.appl_errors[1])
	assert(obj.appl_errors[1] == 'IDL:omg.org/CORBA/NO_IMPLEMENT:1.0', 'expected exception id="IDL:omg.org/CORBA/NO_IMPLEMENT:1.0"')
end

function test_giop11_response_with_user_exception()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x19, 0x49, 0x44, 0x4c, 0x3a,
		0x44, 0x43, 0x4d, 0x2f, 0x4f, 0x70, 0x4e, 0x6f,
		0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
		0x3a, 0x31, 0x2e, 0x30, 0x00
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_response(payload_str, obj)
	print('Response:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print('\tappl_errors:', obj.appl_errors[1])
	assert(obj.appl_errors[1] == 'IDL:DCM/OpNotAllowed:1.0', 'expected exception id="IDL:DCM/OpNotAllowed:1.0"')
end


function test_giop12_response_with_user_exception()
    local payload_arr = {
        0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x02, 0x01, 
        0x00, 0x00, 0x03, 0xf4, 0x00, 0x00, 0x00, 0x08, 
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 
        0x4e, 0x45, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x02, 
        0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x1e, 0x49, 0x44, 0x4c, 0x3a, 
        0x6a, 0x61, 0x76, 0x61, 0x78, 0x2f, 0x6e, 0x61, 
        0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x4e, 0x61, 0x6d, 
        0x69, 0x6e, 0x67, 0x45, 0x78, 0x3a, 0x31, 0x2e, 
        0x30, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x0a, 
        0x00, 0x00, 0x00, 0x49, 0x52, 0x4d, 0x49, 0x3a, 
        0x6a, 0x61, 0x76, 0x61, 0x78, 0x2e, 0x6e, 0x61, 
        0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 
        0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 
        0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 
        0x6f, 0x6e, 0x3a, 0x38, 0x35, 0x39, 0x35, 0x34, 
        0x34, 0x33, 0x31, 0x44, 0x34, 0x41, 0x30, 0x37, 
        0x46, 0x41, 0x33, 0x3a, 0x39, 0x30, 0x45, 0x30, 
        0x44, 0x44, 0x36, 0x31, 0x43, 0x42, 0x39, 0x31, 
        0x44, 0x41, 0x46, 0x42, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x0c, 0x02, 0x01, 0x00, 0x00, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 
        0x7f, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x23, 
        0x49, 0x44, 0x4c, 0x3a, 0x6f, 0x6d, 0x67, 0x2e, 
        0x6f, 0x72, 0x67, 0x2f, 0x43, 0x4f, 0x52, 0x42, 
        0x41, 0x2f, 0x57, 0x53, 0x74, 0x72, 0x69, 0x6e, 
        0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x31, 
        0x2e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
        0x00, 0x00, 0x00, 0x2c, 0xfe, 0xff, 0x00, 0x48, 
        0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f, 
        0x00, 0x57, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6c, 
        0x00, 0x64, 0x00, 0x31, 0x00, 0x20, 0x00, 0x6e, 
        0x00, 0x6f, 0x00, 0x74, 0x00, 0x20, 0x00, 0x66, 
        0x00, 0x6f, 0x00, 0x75, 0x00, 0x6e, 0x00, 0x64, 
        0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0x0a, 
        0x00, 0x00, 0x00, 0x45, 0x52, 0x4d, 0x49, 0x3a, 
        0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x6c, 
        0x61, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x63, 
        0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 
        0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x3a, 0x43, 
        0x44, 0x33, 0x38, 0x46, 0x39, 0x39, 0x33, 0x30, 
        0x45, 0x41, 0x38, 0x41, 0x41, 0x45, 0x43, 0x3a, 
        0x36, 0x31, 0x30, 0x39, 0x43, 0x35, 0x39, 0x41, 
        0x32, 0x36, 0x33, 0x36, 0x44, 0x44, 0x38, 0x35, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
        0x00, 0x00, 0x00, 0x14, 0x7f, 0xff, 0xff, 0x0a, 
        0x00, 0x00, 0x00, 0x42, 0x52, 0x4d, 0x49, 0x3a, 
        0x6a, 0x61, 0x76, 0x61, 0x2e, 0x6c, 0x61, 0x6e, 
        0x67, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 
        0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 
        0x65, 0x6e, 0x74, 0x3a, 0x43, 0x44, 0x33, 0x38, 
        0x46, 0x39, 0x39, 0x33, 0x30, 0x45, 0x41, 0x38, 
        0x41, 0x41, 0x45, 0x43, 0x3a, 0x36, 0x31, 0x30, 
        0x39, 0x43, 0x35, 0x39, 0x41, 0x32, 0x36, 0x33, 
        0x36, 0x44, 0x44, 0x38, 0x35, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xed, 
        0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xfe, 0xec, 0x00, 0x00, 0x00, 0x64, 
        0x00, 0x00, 0x00, 0x60, 0xfe, 0xff, 0x00, 0x63, 
        0x00, 0x6f, 0x00, 0x6d, 0x00, 0x2e, 0x00, 0x73, 
        0x00, 0x75, 0x00, 0x6e, 0x00, 0x2e, 0x00, 0x65, 
        0x00, 0x6e, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 
        0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x73, 
        0x00, 0x65, 0x00, 0x2e, 0x00, 0x6e, 0x00, 0x61, 
        0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 
        0x00, 0x2e, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x70, 
        0x00, 0x6c, 0x00, 0x2e, 0x00, 0x54, 0x00, 0x72, 
        0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x69, 
        0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x43, 
        0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x65, 
        0x00, 0x78, 0x00, 0x74, 0xff, 0xff, 0xff, 0xfc, 
        0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xfe, 0x74, 0x00, 0x00, 0x00, 0x30, 
        0x00, 0x00, 0x00, 0x2c, 0xfe, 0xff, 0x00, 0x54, 
        0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 
        0x00, 0x69, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 
        0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 
        0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x2e, 
        0x00, 0x6a, 0x00, 0x61, 0x00, 0x76, 0x00, 0x61, 
        0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0x0a, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 
        0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x12, 
        0xfe, 0xff, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x4c, 
        0x00, 0x6f, 0x00, 0x6f, 0x00, 0x6b, 0x00, 0x75, 
        0x00, 0x70, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfd, 
        0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x14, 
        0x00, 0x00, 0x00, 0xcc, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0x70, 0x7f, 0xff, 0xff, 0x0a, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xe0, 
        0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x0e, 
        0xfe, 0xff, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x6f, 
        0x00, 0x6b, 0x00, 0x75, 0x00, 0x70, 0x00, 0x00, 
        0xff, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0x0a, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x74, 
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 
        0x7f, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xfd, 0xa4, 0x00, 0x00, 0x00, 0x76, 
        0x00, 0x00, 0x00, 0x72, 0xfe, 0xff, 0x00, 0x63, 
        0x00, 0x6f, 0x00, 0x6d, 0x00, 0x2e, 0x00, 0x73, 
        0x00, 0x75, 0x00, 0x6e, 0x00, 0x2e, 0x00, 0x65, 
        0x00, 0x6e, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 
        0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x73, 
        0x00, 0x65, 0x00, 0x2e, 0x00, 0x6e, 0x00, 0x61, 
        0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 
        0x00, 0x2e, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x70, 
        0x00, 0x6c, 0x00, 0x2e, 0x00, 0x53, 0x00, 0x65, 
        0x00, 0x72, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6c, 
        0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 
        0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x50, 
        0x00, 0x72, 0x00, 0x6f, 0x00, 0x76, 0x00, 0x69, 
        0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x49, 
        0x00, 0x6d, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x00, 
        0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0x0a, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x18, 
        0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x3e, 
        0xfe, 0xff, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 
        0x00, 0x69, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x43, 
        0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x65, 
        0x00, 0x78, 0x00, 0x74, 0x00, 0x50, 0x00, 0x72, 
        0x00, 0x6f, 0x00, 0x76, 0x00, 0x69, 0x00, 0x64, 
        0x00, 0x65, 0x00, 0x72, 0x00, 0x49, 0x00, 0x6d, 
        0x00, 0x70, 0x00, 0x6c, 0x00, 0x2e, 0x00, 0x6a, 
        0x00, 0x61, 0x00, 0x76, 0x00, 0x61, 0x00, 0x00, 
        0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x08, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xd8, 
        0xff, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0x0a    
    }
    local obj = Stats()
    local payload_str = string.char(unpack(payload_arr))
    local parse_status = corba.parse_response(payload_str, obj)
    print('Response:')
    print('\tparse_status:', parse_status)
    assert(parse_status == 0, 'parse status = 0 means OK')
    print('\tappl_errors:', obj.appl_errors[1])
    assert(obj.appl_errors[1] == 'IDL:javax/naming/NamingEx:1.0', 'expected exception id="IDL:javax/naming/NamingEx:1.0"')
end


function test_cosnaming1_request()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x01, 0x00,
		0x1c, 0x02, 0x00, 0x00, 0x18, 0x05, 0xe3, 0x3e,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x13, 0x2c, 0x2b, 0x0b, 0xfe, 0x86, 0xd2, 0x05,
		0x68, 0x31, 0xf6, 0x62, 0x22, 0xda, 0x61, 0xed,
		0x01, 0x00, 0x00, 0x00, 0xd8, 0xca, 0xec, 0xa0,
		0x07, 0x00, 0x00, 0x00, 0x72, 0x65, 0x62, 0x69,
		0x6e, 0x64, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x05,
		0x09, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
		0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f,
		0x6c, 0x76, 0x65, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x25, 0x00, 0x00, 0x00, 0x49, 0x44, 0x4c, 0x3a,
		0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
		0x2f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
		0x6f, 0x6c, 0x76, 0x65, 0x2f, 0x53, 0x65, 0x72,
		0x76, 0x69, 0x63, 0x65, 0x3a, 0x31, 0x2e, 0x30,
		0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x00, 0x54, 0x42, 0x4f, 0x58, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x55, 0x4e, 0x49, 0x58, 0x00, 0x00, 0x00, 0x00,
		0x0a, 0x00, 0x00, 0x00, 0x63, 0x77, 0x70, 0x6c,
		0x2d, 0x30, 0x34, 0x37, 0x35, 0x00, 0x00, 0x00,
		0x2e, 0x00, 0x00, 0x00, 0x2f, 0x74, 0x6d, 0x70,
		0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x2d, 0x6d,
		0x6c, 0x75, 0x6b, 0x61, 0x73, 0x69, 0x65, 0x2f,
		0x6c, 0x69, 0x6e, 0x63, 0x2d, 0x32, 0x35, 0x65,
		0x62, 0x2d, 0x30, 0x2d, 0x32, 0x63, 0x39, 0x65,
		0x61, 0x38, 0x62, 0x32, 0x38, 0x66, 0x33, 0x33,
		0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x00, 0x00,
		0x63, 0x77, 0x70, 0x6c, 0x2d, 0x30, 0x34, 0x37,
		0x35, 0x00, 0xed, 0xbb, 0x1c, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xf4, 0xec, 0x17, 0x3e,
		0xdc, 0x71, 0x6d, 0xed, 0x3b, 0xab, 0x57, 0xdb,
		0x95, 0x54, 0x85, 0x61, 0x01, 0x00, 0x00, 0x00,
		0xa0, 0x3a, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00,
		0xca, 0xae, 0xdf, 0xba, 0x58, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x02, 0x00, 0x2e, 0x00, 0x00, 0x00,
		0x2f, 0x74, 0x6d, 0x70, 0x2f, 0x6f, 0x72, 0x62,
		0x69, 0x74, 0x2d, 0x6d, 0x6c, 0x75, 0x6b, 0x61,
		0x73, 0x69, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x63,
		0x2d, 0x32, 0x35, 0x65, 0x62, 0x2d, 0x30, 0x2d,
		0x32, 0x63, 0x39, 0x65, 0x61, 0x38, 0x62, 0x32,
		0x38, 0x66, 0x33, 0x33, 0x35, 0x00, 0x00, 0x00,
		0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xf4, 0xec, 0x17, 0x3e, 0xdc, 0x71, 0x6d, 0xed,
		0x3b, 0xab, 0x57, 0xdb, 0x95, 0x54, 0x85, 0x61,
		0x01, 0x00, 0x00, 0x00, 0xa0, 0x3a, 0x0c, 0x60,
		0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xf4, 0xec, 0x17, 0x3e,
		0xdc, 0x71, 0x6d, 0xed, 0x3b, 0xab, 0x57, 0xdb,
		0x95, 0x54, 0x85, 0x61, 0x01, 0x00, 0x00, 0x00,
		0xa0, 0x3a, 0x0c, 0x60, 0x01, 0x00, 0x00, 0x00,
		0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_request(payload_str, obj)
	print('Request:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print("\tbrowser_version:", string.format("0x%04x", obj.browser_version))
	assert(obj.browser_version == 0x0102, 'browser_version failed')
	print("\top name:", '"' .. obj.operation_name .. '"')
	assert(obj.operation_name == 'rebind', 'expected: "rebind" actual: "' .. obj.operation_name .. '"')
end

function test_cosnaming2_request()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x01, 0x00,
		0x65, 0x00, 0x00, 0x00, 0x28, 0x05, 0xe3, 0x3e,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0b, 0x00, 0x00, 0x00, 0x4e, 0x61, 0x6d, 0x65,
		0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00,
		0x11, 0x00, 0x00, 0x00, 0x62, 0x69, 0x6e, 0x64,
		0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
		0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x0c, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x00, 0x01, 0x05, 0x09, 0x01, 0x01, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
		0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00,
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_request(payload_str, obj)
	print('Request:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print("\tbrowser_version:", string.format("0x%04x", obj.browser_version))
	assert(obj.browser_version == 0x0102, 'browser_version failed')
	print("\top name:", '"' .. obj.operation_name .. '"')
	assert(obj.operation_name == 'bind_new_context', 'expected: "bind_new_context" actual: "' .. obj.operation_name .. '"')
end


function test_close_connection_request()
	local payload_arr = {
		0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x01, 0x05,
		0x00, 0x00, 0x00, 0x00,
	}
	local obj = Stats()
	local payload_str = string.char(unpack(payload_arr))
	local parse_status = corba.parse_request(payload_str, obj)
	print('Request:')
	print('\tparse_status:', parse_status)
	assert(parse_status == 0, 'parse status = 0 means OK')
	print("\top name:", '"' .. obj.operation_name .. '"')
	assert(obj.operation_name == '<CloseConnection>', 'expected: "close_connection" actual: "' .. obj.operation_name .. '"')
end


function test_invalid_request()
    local payload_arr = {
        0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x01, 0x00,
        0x65, 0x00, 0x00, 0x00, 0x28, 0x05, 0xe3, 0x3e,
        0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0b, 0x00, 0x00, 0x00, 0x4e, 0x61, 0x6d, 0x65,
        0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x62, 0x69, 0x6e, 0x64,
        0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
        0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x00, 0x01, 0x05, 0x09, 0x01, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00,
    }
    -- make the message corrupted:
    payload_arr[1] = 0xff
    local obj = Stats()
    local payload_str = string.char(unpack(payload_arr))
    local parse_status = corba.parse_request(payload_str, obj)
    print('Request:')
    print('\tparse_status:', parse_status)
    assert(parse_status == 1, 'parse status = 1 means FAIL')
    print("\top name:", '"' .. obj.operation_name .. '"')
    assert(obj.operation_name == '<InvalidGIOP>', 'expected: "<InvalidGIOP>" actual: "' .. obj.operation_name .. '"')
end

function test_invalid2_request()
    local payload_arr = {
        0x47, 0x49, 0x4f, 0x50, 0x01, 0x02, 0x01, 0x00,
        0x65, 0x00, 0x00, 0x00, 0x28, 0x05, 0xe3, 0x3e,
        0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0b, 0x00, 0x00, 0x00, 0x4e, 0x61, 0x6d, 0x65,
        0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x62, 0x69, 0x6e, 0x64,
        0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
        0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x00, 0x01, 0x05, 0x09, 0x01, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00,
    }
    -- set unknown message type:
    payload_arr[8] = 0xff
    local obj = Stats()
    local payload_str = string.char(unpack(payload_arr))
    local parse_status = corba.parse_request(payload_str, obj)
    print('Request:')
    print('\tparse_status:', parse_status)
    assert(parse_status == 1, 'parse status = 1 means FAIL')
    print("\top name:", '"' .. obj.operation_name .. '"')
    assert(obj.operation_name == '<Unknown0xff>', 'expected: "<Unknown0xff>" actual: "' .. obj.operation_name .. '"')
end


